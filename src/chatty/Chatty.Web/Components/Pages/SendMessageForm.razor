@page "/chat/{ChatRoomId}/send-message"
@using Blazored.LocalStorage
@using Chatty.Silo
@using Chatty.Silo.Primitives
@using System.ComponentModel.DataAnnotations

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>
<EditForm Model="@Model" OnSubmit="@OnSubmit">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Username" InputType="InputType.Text" @bind-Value="@Model.Username" HelperText="Minimum 3 characters" For="@(() => Model.Username)" Required="true"
                          RequiredError="Username is required"/>
            <MudTextField Label="Message" InputType="InputType.Text" @bind-Value="@Model.Message" For="@(() => Model.Message)" Required="true"
                          RequiredError="Message is required"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Send
                to @ChatRoomId</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {

    private class SendMessageModel
    {
        [Required, MinLength(3)]
        public string? Username { get; set; }

        [Required, MaxLength(100)]
        public string? Message { get; set; }
    }

    // Parameters
    [Parameter, Required]
    public string ChatRoomId { get; set; } = null!;

    // DI
    [Inject]
    private ILocalStorageService LocalStorage { get; init; } = null!;

    [Inject]
    IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    private IClusterClient ClusterClient { get; init; } = null!;

    // State
    private SendMessageModel Model { get; set; } = new();

    // Methods
    private async Task TryPreventNavigation(LocationChangingContext context)
    {
        if (Model.Message is not null)
        {
            var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Leaving this page will clear the current message you're typing");
            if (!confirm)
            {
                context.PreventNavigation();
            }
        }
    }

    private async Task TryLoadUsernameFromSession()
    {
        if (Model.Username is null)
        {
            var username = await LocalStorage.GetItemAsStringAsync("chat:username");
            if (username is not null)
            {
                Model.Username = username;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task OnSubmit(EditContext editContext)
    {
        if (editContext.Validate())
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        await StoreUsernameInSession();
        var chatRoomGrain = ClusterClient.GetGrain<IChatRoom>(ChatRoomId);
        var chatMessage = Silo.Primitives.ChatMessage.Create(Username.Create(Model.Username!), Model.Message!, ChatRoomId);
        await chatRoomGrain.PostMessage(chatMessage);
        Model.Message = null;
    }

    private Task OnBeforeInternalNavigation(LocationChangingContext context) => TryPreventNavigation(context);

    private async Task StoreUsernameInSession() => await LocalStorage.SetItemAsStringAsync("chat:username", Model.Username!);
}