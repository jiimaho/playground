@page "/chat/{ChatRoomId}"
@rendermode InteractiveAuto
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Chatty.Silo.Features.Chatroom.Grains
@using Chatty.Silo.Features.Chatroom.Observers

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h5">Welcome to /@ChatRoomId (@Messages.Count message(s))</MudText>

    @if (_notYetInitialized)
    {
        <h1>Loading messages...</h1>
    }
    else if (Messages.Count == 0)
    {
        <MudText Typo="Typo.h5">Wanna be the first one to send a message?</MudText>
        <SendMessageForm ChatRoomId="@ChatRoomId"/>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12">
                <MudButton Size="Size.Small" Color="Color.Secondary" OnClick="@Clear">Delete all
                    messages
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @foreach (var message in Messages)
                {
                    <ChatMessage Message="@message"></ChatMessage>
                }
            </MudItem>

            <MudItem xs="12">
                <UsersOnline ChatRoomId="@ChatRoomId"/>
            </MudItem>

            <MudItem xs="12">
                <SendMessageForm ChatRoomId="@ChatRoomId"/>
            </MudItem>

        </MudGrid>
    }
</MudContainer>

@code {

    // Parameters
    [Parameter, Required]
    public string ChatRoomId { get; set; } = null!;

    // DI
    [Inject]
    private IClusterClient ClusterClient { get; init; } = null!;

    [Inject]
    IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    private ILocalStorageService LocalStorage { get; init; } = null!;

    // State
    private IChatRoomObserver? _chatRoomObserver;

    private List<Chatty.Silo.Primitives.ChatMessage> Messages { get; } = [];

    private bool _notYetInitialized = true;

    // Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(300);
        var chatRoomGrain = ClusterClient.GetGrain<IChatRoom>(ChatRoomId);
        var observer = new ChatRoomObserver(async msg =>
        {
            Messages.Add(msg);
            await InvokeAsync(StateHasChanged);
        }, async msg =>
        {
            Messages.Remove(msg);
            await InvokeAsync(StateHasChanged);
        }, _ => Task.CompletedTask);
        _chatRoomObserver = ClusterClient.CreateObjectReference<IChatRoomObserver>(observer);
        await chatRoomGrain.Join(_chatRoomObserver);
        var history = await chatRoomGrain.GetHistory();
        Messages.AddRange(history.ToList());
        _notYetInitialized = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollChatToBottom();
    }

    // Methods
    private async Task Clear()
    {
        var chatRoomGrain = ClusterClient.GetGrain<IChatRoom>(ChatRoomId);
        await chatRoomGrain.Clear();
        Messages.Clear();
    }

    private async Task ScrollChatToBottom() => await JsRuntime.InvokeVoidAsync("scrollToBottom", "chat-container");
}