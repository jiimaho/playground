@page "/chat/{ChatRoomId}"
@using Orleans.Silo
@using Orleans.Silo.Primitives
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@rendermode InteractiveServer

<SendMessageWebAssembly/>
<div class="chat-container">
    <h1>Chat @Messages.Count</h1>
    <button @onclick="Clear">Clear</button>
    <Virtualize ItemsProvider="LoadMessages">
        <EmptyContent>
            No rows
        </EmptyContent>
        <ChildContent>
            <ChatMessage Message="@context"></ChatMessage>
        </ChildContent>
    </Virtualize>
    <UsersOnline ChatRoomId="@ChatRoomId"/>
</div>

<input @bind="@Username"/>
<input @bind="@Message"/>
<button @onclick="SendMessage">Send Message</button>

@code {

    // Parameters
    [Parameter, Required]
    public string ChatRoomId { get; set; } = null!;

    // DI
    [Inject]
    private IClusterClient ClusterClient { get; init; } = null!;

    [Inject]
    private ILocalStorageService LocalStorage { get; init; } = null!;

    // State
    private IChatRoomObserver? _chatRoomObserver;

    private List<Orleans.Silo.Primitives.ChatMessage> Messages { get; } = [];
    private string? Message { get; set; }
    private string? Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var chatRoomGrain = ClusterClient.GetGrain<IChatRoom>(ChatRoomId);
        var observer = new ChatRoomObserver(msg =>
        {
            Messages.Add(msg);
            return InvokeAsync(StateHasChanged);
        }, _ => Task.CompletedTask);
        _chatRoomObserver = ClusterClient.CreateObjectReference<IChatRoomObserver>(observer);
        await chatRoomGrain.Join(_chatRoomObserver);
        var history = await chatRoomGrain.GetHistory();
        Messages.AddRange(history.ToList());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var username = await LocalStorage.GetItemAsStringAsync("chat:username");
        if (username is not null)
        {
            Username = username;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Clear()
    {
        var chatRoomGrain = ClusterClient.GetGrain<IChatRoom>(ChatRoomId);
        await chatRoomGrain.Clear();
        Messages.Clear();
    }

    private async Task SendMessage()
    {
        if (Username is null || Message is null)
            return;
        await StoreUsernameInSession();
        var chatRoomGrain = ClusterClient.GetGrain<IChatRoom>(ChatRoomId);
        var chatMessage = new Orleans.Silo.Primitives.ChatMessage(new Username(Username), Message);
        await chatRoomGrain.PostMessage(chatMessage);
    }

    private async Task StoreUsernameInSession()
    {
        await LocalStorage.SetItemAsStringAsync("chat:username", Username!);
    }

    private async ValueTask<ItemsProviderResult<Orleans.Silo.Primitives.ChatMessage>> LoadMessages(ItemsProviderRequest request)
    {
        var chatRoomGrain = ClusterClient.GetGrain<IChatRoom>(ChatRoomId);
        var history = await chatRoomGrain.GetHistory();
        var numOfMessages = Math.Min(request.Count, history.Length - request.StartIndex);
        var grainTokenSource = new GrainCancellationTokenSource();
        request.CancellationToken.Register(() => grainTokenSource.Cancel());
        var messages = await chatRoomGrain.GetHistoryPaging(request.StartIndex, numOfMessages, grainTokenSource.Token);
        return new ItemsProviderResult<Orleans.Silo.Primitives.ChatMessage>(messages, history.Count());
    }

}